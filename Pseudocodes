#IAs des chiens

# ========= BLUE =========
# ========= BLUE =========
# Actuellement capable : déterminer le point du circuit le plus proche de sa position de spawn et s'y rendre

# Détermine l'index j du point d'intersection le plus proche dans le circuit c pour un point de coordonnées (xc, yc)
Fonction inters_plus_proche(Circuit c, Entier x, Entier y) : Entier
    Entier d ← TAILLE_MAX
    Entiers i, xi, yi, di, j

Début
    Pour i ← 0 à nombre_points(c) Faire :
        xi ← coord_x(c, i)
        yi ← coord_y(c, i)
        di ← distance(x, y, xi, yi)

        Si d2 < d Alors :
            d ← di
            j ← i
        FinSi
    FinPour

Retourne j
Fin

# Détermine si un point de coordonnées (x, y) appartient à un segment horizontal ou vertical du circuit c repéré par les points d'index i1 et i2
Fonction est_sur_segment(Circuit c, Entier x, Entier y, Entier i1, Entier i2) : Booléen
    Entier xs1 ← coord_x(c, i1)
    Entier xs2 ← coord_y(c, i2)
    Entier ys1 ← coord_x(c, i1)
    Entier ys2 ← coord_y(c, i2)
    Booleen r  ← (x = xs1 Et x = xs2 Et valeur_entre(y, ys1, ys2)) Ou (y = ys1 Et y = ys2 Et valeur_entre(x, xs1, xs2))

Retourne r
Fin

# Détermine si un point de coordonnées (x, y) est sur le circuit c et retourne l'index du point d'intersection suivante si oui, -1 sinon
Fonction est_sur_circuit(Circuit c, Entier x, Entier y) : Entier
    Booléen j ← -1
    Entier i  ← 0
    Entier n  ← nombre_points(c)

Début
    Si est_sur_segment(c, x, y, n - 1, 0) = Vrai Alors :
        j ← 0
    FinSi

    TantQue i < n Et j = -1 Faire :
        Si est_sur_segment(c, x, y, i, i + 1) = Vrai Alors :
            j ← i + 1
        FinSi

        i ← i + 1
    FinTantQue

Retourne j
Fin

# Va à la position du point du circuit c le plus proche pour un chien a
Fonction aller_sur_circuit(Circuit c, Chien a) : Aucun
    Booléen s ← Faux
    Entier i  ← 0
    Entier xc ← coord_x(a)
    Entier yc ← coord_y(a)
    Entier n  ← inters_plus_proche(c, xc, yc)
    Entier x  ← coord_x(c, n)
    Entier y  ← coord_y(c, n)
    Entier d  ← distance(xc, yc, x, y)
    Entiers j, j1, j2, j3, j4

Début
    TantQue i < arrondir_sup(d) Et s = Faux Faire :
        j1 ← est_sur_circuit(c, xc - i, yc)
        j2 ← est_sur_circuit(c, xc + i, yc)
        j3 ← est_sur_circuit(c, xc, yc - i)
        j4 ← est_sur_circuit(c, xc, yc + i)
        s  ← Vrai
        
        Si j1 > -1 Alors :
            j ← j1
            x ← xc - i
            y ← yc

        Sinon Si j2 > -1 Alors :
            j ← j2
            x ← xc + i
            y ← yc

        Sinon Si j3 > -1 Alors :
            j ← j3
            x ← xc
            y ← yc - i

        Sinon Si j4 > -1 Alors :
            j ← j4
            x ← xc
            y ← yc + i

        Sinon :
            s ← Faux
        FinSi

        i ← i + 1
    FinTantQue

    aller_point(a, x, y, j)
Fin



# ========= YELLOW =========
#Variables externes :
# - circuit (liste de points)
# - target Node

Fonction Yellow(xc,yc,target):
# objectif = tuple (ou 2 vars) d'entiers qui est le point objectif que l'on enverra au serveur
# xc,yc entiers position du chien
# target Node de la cible (id,position), NULL si pas de cible
Debut
    Si target == NULL
        Si est_sur_circuit(xc,yc)
            Si bleu_en_vue == NULL
                objectif = parcourir_circuit(xc,yc)
            Sinon
                objectif = aller_vers_bleu_le_plus_proche
        Sinon
            Si moutons_en_vue == NULL
                objectif = parcourir_circuit(xc,yc)
            Sinon
                target = moutons_en_vue[0]
                objectif = ramener_mouton(xc,yc,target)
    Sinon
        Si target est_dans(moutons_en_vue)
            distance_mouton_bergerie = distance(target.x,target.y,bergerie_x,bergerie_y)
            Si distance_mouton_bergerie > rayon_bergerie
                objectif = ramener_mouton(xc,yc,target)
            Sinon
                target = NULL
            
        Sinon
            objectif = ( target.x,target.y )
Fin


Fonction ramener_mouton(target,rayon)
# target : Node de la cible (id,position)
# rayon : Entier rayon du chien
# bergerie_x,bergerie_x coordonnées du centre de la bergerie (supposés globals)
Debut
    dx = target.x - bergerie_x
    dy = target.y - bergerie_y
    distance_mouton_bergerie = distance(target.x,target.y,bergerie_x,bergerie_y)

    delta_x = (( (rayon - marge) * dx) / distance_mouton_bergerie)
    delta_y = (( (rayon - marge) * dy) / distance_mouton_bergerie)

    objectif = ( target.x + delta_x , target.y + delta_y )
    Retourner objectif
Fin


# ========= PURPLE =========
