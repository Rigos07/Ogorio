#IAs des chiens


# ========= FONCTIONS COMMUNES =========

Fonction generer_circuit(MAX_X,MAX_Y,vue_bleu)
# genère une structure circuit a partir de la taille de la map
# Entier xmin = MAX_X%400
# Entier ymin= 0
# Entier xmax = MAX_X
# Entier ymax = MAX_Y
# Entier vue_bleu = 1000

Debut
    circuit = structure circuit
    ajouter_point(circuit, xmin + vue_bleu , ymin + vue_bleu)
    ajouter_point(circuit, xmin - vue_bleu , ymin + vue_bleu)
    ajouter_point(circuit, xmin - vue_bleu , ymin - vue_bleu)
    Pour i allant de 0 à (MAX_X//400)-1 Faire:
        ajouter_point(circuit, xmin - vue_bleu*(4*i + 3) , ymin - vue_bleu)
        ajouter_point(circuit, xmin - vue_bleu*(4*i + 3) , ymin + vue_bleu*3)
        ajouter_point(circuit, xmin - vue_bleu*(4*i + 5) , ymin + vue_bleu*3)
        ajouter_point(circuit, xmin - vue_bleu*(4*i + 5) , ymin - vue_bleu)

    ajouter_point(circuit, xmin + vue_bleu , ymin - vue_bleu)

    Retourner circuit
Fin


# Détermine le point d'intersection le plus proche dans le circuit c pour un point p
Fonction inters_plus_proche(Circuit c, Point p) : Point
    Entier d ← TAILLE_MAX
    Entiers i, di
    Point pi ← point_circuit(c, 0)
    Point r

Début
    Pour i ← 0 à nombre_points(c) Faire :
        pi ← suivant(pi)
        di ← distance(p, pi)

        Si di < d Alors :
            d ← di
            r ← pi
        FinSi
    FinPour

Retourne r
Fin

# Détermine si un point p appartient à un segment horizontal ou vertical du circuit c repéré par les points p1 et p2
Fonction est_sur_segment(Circuit c, Point p, Point p1, Point p2) : Booléen
    Entier x  ← coord_x(p)
    Entier y  ← coord_y(p)
    Entier x1 ← coord_x(p1)
    Entier y1 ← coord_y(p2)
    Entier x2 ← coord_x(p2)
    Entier y2 ← coord_y(p2)
    Booleen r ← (x = x1 Et x = x2 Et valeur_entre(y, y1, y2)) Ou (y = y1 Et y = y2 Et valeur_entre(x, x1, x2))

Retourne r
Fin

# Détermine si un point p est sur le circuit c et retourne le point d'intersection précédent si oui, Rien sinon
Fonction est_sur_circuit(Circuit c, Point p) : Point
    Entier i ← 0
    Entier n ← nombre_points(c) + 1
    Point p1 ← point_circuit(c, 0)
    Point r  ← Rien
    Point p2

Début
    TantQue i < n Et r = Rien Faire :
        p1 ← suivant(p1)
        p2 ← suivant(p1)

        Si est_sur_segment(c, p, p1, p2) = Vrai Alors :
            r ← p1
        FinSi

        i ← i + 1
    FinTantQue

Retourne r
Fin

# Détermine le point du circuit c le plus proche d'un point p, et retourne le point d'intersection précédent
Fonction rejoindre_circuit(Circuit c, Point p) : Point
    Booléen s ← Faux
    Entier i ← 0
    Entier x ← coord_x(p)
    Entier y ← coord_y(p)
    Point r ← inters_plus_proche(c, p)
    Point rs ← r
    Entier d ← distance(p, r)
    Points p1, p2, p3, p4, ps1, ps2, ps3, ps4

Début
    TantQue i < arrondir_sup(d) Et s = Faux Faire :
        p1  ← point(x - i, y)
        p2  ← point(x + i, y)
        p3  ← point(x, y - i)
        p4  ← point(x, y + i)
        ps1 ← est_sur_circuit(c, p1)
        ps2 ← est_sur_circuit(c, p2)
        ps3 ← est_sur_circuit(c, p3)
        ps4 ← est_sur_circuit(c, p4)
        
        Si ps1 != Rien Alors :
            r ← p1
            rs ← ps1

        Sinon Si ps2 != Rien Alors :
            r ← p2
            rs ← ps2

        Sinon Si ps3 != Rien Alors :
            r ← p2
            rs ← ps3

        Sinon Si ps4 != Rien Alors :
            r ← p2
            rs ← ps4

        Sinon
            s ← Vrai
        FinSi

        i ← i + 1
    FinTantQue

    aller_point(r)

Retourne rs
Fin

# Déplace le chien a vers le circuit c s'il n'y est pas déjà et/ou suit ce circuit
Fonction suivre_circuit(Circuit c, Chien a) : Aucun
    Point p ← est_sur_circuit(position(a)) renvoie un Circuit
    Entier np

Début
    Si p = Rien Alors :
        np ← rejoindre_circuit()

    Sinon
        Si pseudo(a) = yellow Alors :
            np ← suivant(p)

        Sinon Si pseudo(a) = blue Alors :
            np ← precedent(p)
        FinSi
    FinSi

    aller_point(np)
Fin

# Compte les brebis de la liste de noeuds ns et les ajoute à la liste du chien a, ou les modifie si elles existent déjà
Fonction compter_brebis(Chien a, ListeNoeuds ns) : Aucun
    ListeNoeuds l ← liste_noeuds(a)
    Noeud n

Début
    TantQue ns != Rien Faire :
        n ← noeud(ns)

        Si contient(pseudo(ns), bot) = Vrai Alors :
            Si chercher_noeud(l, index(ns)) = Rien Alors :
                ajouter_noeud(l, ns)

            Sinon :
                modifier_noeud(l, ns)
            FinSi
        FinSi

        ns = suivant(ns)
    FinTantQue
Fin

# Détermine et renvoie le noeud contenant le mouton le plus proche du chien a
Fonction mouton_plus_proche(Chien a) : Noeud
    Entier d      ← TAILLE_MAX
    Point p       ← position(a)
    ListeNoeuds l ← liste_noeuds(a)
    Entier di
    Noeud m, r

Début
    TantQue l != Rien Faire :
        m ← noeud(l)
        di ← distance(p, position(m))

        Si di < d Alors :
            d ← di
            r ← m
        FinSi
    FinTantQue

Retourne r
Fin



# ========= BLUE =========
# Actuellement capable :
# - déterminer point du circuit le plus proche
# - y aller
# - suivre circuit
# - enregistrer les moutons
# - déterminer le plus proche

# A faire :
# - localiser les Yellow
# - protocole joystick
# vérifier la compatibilité du code avec les fonctions communes

####################################
####################################MAJ ÇA !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
####################################
Fonction Blue(xc,yc,cherche):
# Comportement général du Blue
# xc,yc entiers position du chien
# Booléen cherche = initialisé a False
Début
    mettre_a_jour_moutons(nodes_en_vue())
    Si est_sur_circuit(xc,yc)
        Si detecter_yellow() != NULL
            Si est_sur_yellow(xc,yc)
                cible = trouver_mouton_plus_proche(xc,yc)
                objectif = joystick(cible)
            Sinon
                objectif = xc,yc (s'arreter)
        Sinon
            objectif = parcourir_circuit(xc,yc"blue")
    Sinon
        objectif = aller_sur_circuit(xc,yc)
Fin


# ========= YELLOW =========
# Actuellement capable : 
# - Rejoindre le circuit depuis son spawn
# - Ramener 1 brebis quand hors circuit et quand assignée en target
# A faire :
# - parcourir le circuit
# - localiser le bleu le plus proche
# Variables externes :
# - circuit (liste de points)
# - target Node

# À faire :
# lire joystick
# vérifier la compatibilité du code avec les fonctions communes


Fonction Yellow(xc,yc,target):
# objectif = tuple (ou 2 vars) d'entiers qui est le point objectif que l'on enverra au serveur
# xc,yc entiers position du chien
# target Node de la cible (id,position), NULL si pas de cible
# bergerie_x,bergerie_y,rayon_bergerie : informations sur la bergerie, supposées globales
# circuit : Circuit de Yellow
Debut
    Si target == NULL
        Si est_sur_circuit(xc,yc)
            Si detecter_blue(nodes_en_vue) == NULL
                objectif = parcourir_circuit(xc,yc,"yellow")
            Sinon 
                objectif = aller_vers_bleu_le_plus_proche(nodes_en_vue)
        Sinon
            Si nodes_en_vue == NULL
                objectif = aller_sur_circuit(xc,yc)
            Sinon
                target = nodes_en_vue[0]
                objectif = ramener_mouton(xc,yc,target)
    Sinon
        Si target est_dans(nodes_en_vue)
            distance_mouton_bergerie = distance(target.x,target.y,bergerie_x,bergerie_y)
            Si distance_mouton_bergerie > rayon_bergerie
                objectif = ramener_mouton(xc,yc,target)
            Sinon
                target = NULL
        Sinon
            objectif = ( target.x,target.y )

    Retourner objectif
Fin



Fonction initialiser_Yellow():
# Genère les structures nécessaires au fonctionnement du Yellow
# vue_bleu Entier supposé constant pour le moment
Debut
    MAX_X , MAX_Y = lire_taille_map()
    circuit = generer_circuit(MAX_X,MAX_Y,vue_bleu)
    Yellow = structure yellow (node = lire_position(),target = NULL)
    Tant que (Vrai)Faire
        Yellow.position = lire_position()
        objectif = Yellow(Yellow)
        aller_point(objectif)
    Fin
Fin


Fonction ramener_mouton(target,rayon)
# Retourne le point objectif pour ramener une cible donnée à la bergerie
# target : Node de la cible (id,position)
# rayon : Entier rayon du chien
# bergerie_x,bergerie_x coordonnées du centre de la bergerie (supposées globales)
Debut
    dx = target.x - bergerie_x
    dy = target.y - bergerie_y
    distance_mouton_bergerie = distance(target.x,target.y,bergerie_x,bergerie_y)

    delta_x = (( (rayon - marge) * dx) / distance_mouton_bergerie)
    delta_y = (( (rayon - marge) * dy) / distance_mouton_bergerie)

    objectif = ( target.x + delta_x , target.y + delta_y )
    Retourner objectif
Fin

# ========= PURPLE =========
# A faire :
# - generation du circuit
# - ramener une brebis en 2 temps


